function spawnTiles()
    destroyTiles()
    -- 16*16
    for row = 1, 16 do
        for col = 1, 16 do
            -- 真ん中の4つはスポーンさせない
            if col >= 8 and col < 10 and row >= 8 and row < 10 then
                goto continue
            end

            do
                local rotation = {x = 0, y = 90, z = 0}
                if (col % 2 == 0) then
                    rotation.y = 0
                end

                spawnBaseTile(
                    {
                        x = ORIGIN_POS.x + GRID * (col - 1),
                        y = 1,
                        z = ORIGIN_POS.z - GRID * (row - 1)
                    },
                    rotation
                )

                -- 1つずつウェイトを入れると遅すぎるのでいくつか毎に入れる
                if col % 16 == 0 then
                    wait(0.001)
                end
            end
            ::continue::
        end
    end

    return 1
end

function spawnBaseTile(position, rotation)
    local tile =
        spawnObject(
        {
            type = "Custom_Token",
            position = position,
            rotation = rotation,
            scale = {x = 0.4, y = 1, z = 0.4},
            sound = false
        }
    )
    tile.setCustomObject({image = ASSET.tile})
    tile.setColorTint(COLOR.tile)
    tile.lock()
    table.insert(spawnedObjects.tile, tile)
end

function spawnOuterWall()
    destroyOuterWall()
    local wall = {
        type = "BlockSquare",
        scale = {x = GRID * 16, y = 1, z = 0.23},
        position = {y = 1.45},
        rotation = {x = 0, y = 0, z = 0}
    }
    local walls = {}

    wall.position.x = 0
    wall.position.z = ORIGIN_POS.z + GRID / 2
    table.insert(walls, spawnObject(wall))

    wall.position.x = 0
    wall.position.z = ORIGIN_POS.z - GRID * 15 - GRID / 2
    table.insert(walls, spawnObject(wall))

    wall.position.x = ORIGIN_POS.x + GRID * 15 + GRID / 2
    wall.position.z = -GRID
    wall.rotation.y = 90
    table.insert(walls, spawnObject(wall))

    wall.position.x = ORIGIN_POS.x - GRID / 2
    wall.position.z = -GRID
    wall.rotation.y = 90
    table.insert(walls, spawnObject(wall))

    for _, wall in ipairs(walls) do
        wall.lock()
        wall.setColorTint(COLOR.wall)
        table.insert(spawnedObjects.wall.outer, wall)
    end

    return 1
end

function spawnCenterWall()
    destroyCenterWall()
    local centerWall =
        spawnObject(
        {
            type = "BlockSquare",
            scale = {x = 1.8 * 2, y = 0.5, 2, z = 1.8 * 2},
            position = {x = ORIGIN_POS.x + 1.8 * 7.5, y = 1, z = ORIGIN_POS.z - 1.8 * 7.5}
        }
    )

    centerWall.lock()
    centerWall.setColorTint(COLOR.wall)
    table.insert(spawnedObjects.wall.center, centerWall)

    return 1
end

function spawnInnerWalls()
    -- 壁についている4つを作る
    -- TODO: 名前を変える
    local function spawnInnerKabenituiteiruWall()
        destroyInnerWalls()
        local wallBaseParams = {
            type = "BlockSquare",
            scale = {x = 1.5, y = 1, z = 0.23},
            position = {y = 1.45},
            sound = false
        }

        -- ゲームボード4枚分
        for i = 1, 4 do
            local basePosition = nil
            if i == 1 then
                basePosition = {
                    x = ORIGIN_POS.x,
                    z = ORIGIN_POS.z
                }
            elseif i == 2 then
                basePosition = {
                    x = ORIGIN_POS.x + 15 * GRID,
                    z = ORIGIN_POS.z
                }
            elseif i == 3 then
                basePosition = {
                    x = ORIGIN_POS.x,
                    z = ORIGIN_POS.z - 15 * GRID
                }
            elseif i == 4 then
                basePosition = {
                    x = ORIGIN_POS.x + 15 * GRID,
                    z = ORIGIN_POS.z - 15 * GRID
                }
            end

            -- 各ボードは8*8なので、壁を置ける場所は7箇所
            -- 壁:  １２３４５６７
            -- 床: １２３４５６７８

            -- basePositionから+または-GRID/2された場所が1番目の壁の場所

            -- 横と縦のを作るので2回ループ。1が横2が縦
            for j = 1, 2 do
                -- 1~6の範囲でランダムの位置を求める。
                -- 端にを置かないことを考慮する必要があるが、+GRID/2しているところが端なので、最低でも+1すれば端にはならない
                local random = math.random(1, 6)
                local position = copy(basePosition)
                position.y = 1.45
                local rotation = {}

                if j == 1 then
                    -- 横
                    rotation = {x = 0, y = 0, z = 0}
                    if i == 1 or i == 2 then
                        position.z = position.z - GRID / 2 - random * GRID
                    else
                        position.z = position.z + GRID / 2 + random * GRID
                    end
                else
                    -- 縦
                    rotation = {x = 0, y = 90, z = 0}
                    if i == 1 or i == 3 then
                        position.x = position.x + GRID / 2 + random * GRID
                    else
                        position.x = position.x - GRID / 2 - random * GRID
                    end
                end

                local wallParams = copy(wallBaseParams)
                wallParams.position = position
                wallParams.rotation = rotation

                local wall = spawnObject(wallParams)
                wall.setColorTint(COLOR.wall)
                wall.lock()
                table.insert(spawnedObjects.wall.inner, wall)
            end
        end
    end
    spawnInnerKabenituiteiruWall()

    spawnLshapeWall()
    return 1
end

function spawnLshapeWall()
    -- TODO: ここにボームボード4種類分のループ

    -- 4種類をL字を配置する
    local alreadyUsed = {}
    for i = 1, 4 do
        log(i .. "個目")
        ::start::
        local col = math.random(1, 7)
        local row = math.random(1, 7)

        if (col == 7 and row == 7) then
            log("LShape: 7,7なので再抽選")
            goto start
        end

        local position = {
            x = ORIGIN_POS.x + row * GRID,
            y = 2,
            z = ORIGIN_POS.z - col * GRID
        }

        if isAlreadyUsedTable(alreadyUsed, position) then
            log("LShape: 座標がかぶったので再抽選")
            goto start
        end

        -- 現在の位置をalreadyUsedに保存
        table.insert(alreadyUsed, position)

        local marker =
            spawnObject(
            {
                type = "BlockSquare",
                position = position,
                sound = false
            }
        )
        local LshapePosition = copy(position)
        LshapePosition.y = 0.95
        local LshapeRotation = {x = 0, y = 0, z = 0}
        LshapeRotation.y = (i - 1) * 90
        local Lshape =
            spawnObject(
            {
                type = "Custom_Model",
                position = LshapePosition,
                rotation = LshapeRotation,
                sound = false
            }
        )
        Lshape.setCustomObject(
            {
                mesh = ASSET.wall.lshape.mesh,
                collider = ASSET.wall.lshape.mesh,
                convex = false,
                material = 1,
                specular_intensity = 0
            }
        )
        Lshape.setColorTint(COLOR.wall)
        Lshape.lock()
        log("X: " .. position.x .. ",Y: " .. position.z .. " に配置")
        table.insert(spawnedObjects.wall.inner, marker)
        table.insert(spawnedObjects.wall.inner, Lshape)
    end
end
