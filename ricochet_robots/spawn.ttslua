function spawnTiles()
    destroyTiles()
    -- 16*16
    for row = 1, 16 do
        for col = 1, 16 do
            -- 真ん中の4つはスポーンさせない
            if col >= 8 and col < 10 and row >= 8 and row < 10 then
                goto continue
            end

            do
                local rotation = {x = 0, y = 90, z = 0}
                if (col % 2 == 0) then
                    rotation.y = 0
                end

                spawnBaseTile(
                    {
                        x = ORIGIN_POS.x + GRID * (col - 1),
                        y = 1,
                        z = ORIGIN_POS.z - GRID * (row - 1)
                    },
                    rotation
                )

                -- 1つずつウェイトを入れると遅すぎるのでいくつか毎に入れる
                if col % 16 == 0 then
                    wait(0.001)
                end
            end
            ::continue::
        end
    end

    return 1
end

function spawnBaseTile(position, rotation)
    local tile =
        spawnObject(
        {
            type = "Custom_Token",
            -- 真ん中らへん
            position = {
                x = ORIGIN_POS.x + GRID * 7 + GRID / 2,
                y = 0.5,
                z = ORIGIN_POS.z - GRID * 7 - GRID / 2
            },
            rotation = rotation,
            scale = {x = 0.4, y = 1, z = 0.4},
            sound = false
        }
    )
    tile.setCustomObject({image = ASSET.tile})
    tile.setColorTint(COLOR.tile)
    tile.setPositionSmooth(position, false, false)
    tile.lock()
    table.insert(spawnedObjects.tile, tile)
end

function spawnOuterWall()
    destroyOuterWall()
    local wall = {
        type = "BlockSquare",
        scale = {x = GRID * 16, y = 1, z = 0.23},
        position = {y = -0.15},
        rotation = {x = 0, y = 0, z = 0}
    }
    local walls = {}

    wall.position.x = 0
    wall.position.z = ORIGIN_POS.z + GRID / 2
    table.insert(walls, spawnObject(wall))

    wall.position.x = 0
    wall.position.z = ORIGIN_POS.z - GRID * 15 - GRID / 2
    table.insert(walls, spawnObject(wall))

    wall.position.x = ORIGIN_POS.x + GRID * 15 + GRID / 2
    wall.position.z = -GRID
    wall.rotation.y = 90
    table.insert(walls, spawnObject(wall))

    wall.position.x = ORIGIN_POS.x - GRID / 2
    wall.position.z = -GRID
    wall.rotation.y = 90
    table.insert(walls, spawnObject(wall))

    for _, wall in ipairs(walls) do
        local pos = wall.getPosition()
        wall.setPositionSmooth({pos["x"], 1.45, pos["z"]}, false, false)
        wall.lock()
        wall.setColorTint(COLOR.wall)
        table.insert(spawnedObjects.wall.outer, wall)
    end

    return 1
end

function spawnCenterWall()
    destroyCenterWall()
    local centerWall =
        spawnObject(
        {
            type = "BlockSquare",
            scale = {x = 1.8 * 2, y = 0.5, 2, z = 1.8 * 2},
            position = {x = ORIGIN_POS.x + 1.8 * 7.5, y = 1, z = ORIGIN_POS.z - 1.8 * 7.5}
        }
    )

    centerWall.lock()
    centerWall.setColorTint(COLOR.wall)
    table.insert(spawnedObjects.wall.center, centerWall)

    return 1
end

function spawnInnerWalls()
    resetAbilableMarkers()

    -- ゲームボード4枚分
    for board = 1, 4 do
        local restartCount = -4
        log("ボード" .. board .. "枚目:")
        local basePosition = nil
        if board == 1 then
            basePosition = {
                x = ORIGIN_POS.x,
                z = ORIGIN_POS.z
            }
        elseif board == 2 then
            basePosition = {
                x = ORIGIN_POS.x + 15 * GRID,
                z = ORIGIN_POS.z
            }
        elseif board == 3 then
            basePosition = {
                x = ORIGIN_POS.x,
                z = ORIGIN_POS.z - 15 * GRID
            }
        elseif board == 4 then
            basePosition = {
                x = ORIGIN_POS.x + 15 * GRID,
                z = ORIGIN_POS.z - 15 * GRID
            }
        end
        basePosition.y = -0.15

        -- 外壁についている内壁
        do
            local wallBaseParams = {
                type = "BlockSquare",
                scale = {x = 1.5, y = 1, z = 0.23},
                sound = false
            }

            -- 各ボードは8*8なので、壁を置ける場所は7箇所
            -- 壁:  １２３４５６７
            -- 床: １２３４５６７８

            -- basePositionから+または-GRID/2された場所が1番目の壁の場所

            -- 横と縦のを作るので2回ループ。1が横2が縦
            for i = 1, 2 do
                -- 1~6の範囲でランダムの位置を求める。
                -- 端にを置かないことを考慮する必要があるが、+GRID/2しているところが端なので、最低でも+1すれば端にはならない
                local random = math.random(1, 6)
                local position = copy(basePosition)
                local rotation = {}

                if i == 1 then
                    -- 横
                    rotation = {x = 0, y = 0, z = 0}
                    if board == 1 or board == 2 then
                        position.z = position.z - GRID / 2 - random * GRID
                    else
                        position.z = position.z + GRID / 2 + random * GRID
                    end
                else
                    -- 縦
                    rotation = {x = 0, y = 90, z = 0}
                    if board == 1 or board == 3 then
                        position.x = position.x + GRID / 2 + random * GRID
                    else
                        position.x = position.x - GRID / 2 - random * GRID
                    end
                end

                local wallParams = copy(wallBaseParams)
                wallParams.position = position
                wallParams.rotation = rotation

                local wall = spawnObject(wallParams)
                wall.setColorTint(COLOR.wall)
                wall.setPositionSmooth({position.x, 1.45, position.z}, false, false)
                wall.lock()
                table.insert(spawnedObjects.wall.inner, wall)
            end
        end

        -- マーカーとL字の壁
        do
            local markerColors = {"red", "blue", "green", "yellow"}
            local alreadyUsed = {}
            -- 4つ設置するので4回ループ
            for i = 1, 4 do
                -- ボード内で使われた座標を保持しておくテーブル
                ::start::
                restartCount = restartCount + 1
                -- 端には接地しないので2-8でランダムに位置を求める
                local col = math.random(2, 8)
                local row = math.random(2, 8)
                log("　L字" .. i .. "個目: " .. col .. ", " .. row)

                -- centerWallに重なる位置は禁止とする
                -- 2-2も空間が生まれることがあるので禁止
                if
                    (col == 8 and row == 8) or (col == 7 and row == 7) or (col == 8 and row == 7) or
                        (col == 7 and row == 8) or
                        (col == 2 and row == 2)
                 then
                    log("　　禁止区域なので再抽選")
                    goto start
                end

                -- 重複チェック
                if isAlreadyUsedTable(alreadyUsed, {col, row}) then
                    log("　　既存の座標と被ったので再抽選")
                    goto start
                end

                -- 全ボードでの壁同士の距離を確認するための1-1のタイルからの座標
                local globalCol
                local globalRow
                if board == 1 then
                    globalCol = col
                    globalRow = row
                elseif board == 2 then
                    globalCol = col
                    globalRow = 16 - row + 1
                elseif board == 3 then
                    globalCol = 16 - col + 1
                    globalRow = row
                elseif board == 4 then
                    globalCol = 16 - col + 1
                    globalRow = 16 - row + 1
                end

                -- 選んだ位置を中心に3x3に他の壁がないか確認する
                if
                    (isAlreadyUsedTable(objectPosition.wall, {globalCol - 1, globalRow - 1}) or -- 左上
                        isAlreadyUsedTable(objectPosition.wall, {globalCol, globalRow - 1}) or -- 上
                        isAlreadyUsedTable(objectPosition.wall, {globalCol - 1, globalRow + 1}) or -- 右上
                        isAlreadyUsedTable(objectPosition.wall, {globalCol - 1, globalRow}) or -- 左
                        isAlreadyUsedTable(objectPosition.wall, {globalCol, globalRow + 1}) or -- 右
                        isAlreadyUsedTable(objectPosition.wall, {globalCol + 1, globalRow - 1}) or -- 左下
                        isAlreadyUsedTable(objectPosition.wall, {globalCol + 1, globalRow}) or -- 下
                        isAlreadyUsedTable(objectPosition.wall, {globalCol + 1, globalRow + 1}))
                 then -- 右下
                    log("　　隣接しているので再抽選")
                    goto start
                end

                -- ボード内の重複チェックために、localに壁の場所を保持するやつ
                table.insert(alreadyUsed, {col, row})
                -- 全ボードでの壁同士の距離を確認するためにglobalに壁の場所を保持するやつ
                table.insert(objectPosition.wall, {globalCol, globalRow})

                local position = {y = 1.45}
                if board == 1 then
                    position.x = basePosition.x + (row - 1) * GRID
                    position.z = basePosition.z - (col - 1) * GRID
                elseif board == 2 then
                    position.x = basePosition.x - (row - 1) * GRID
                    position.z = basePosition.z - (col - 1) * GRID
                elseif board == 3 then
                    position.x = basePosition.x + (row - 1) * GRID
                    position.z = basePosition.z + (col - 1) * GRID
                elseif board == 4 then
                    position.x = basePosition.x - (row - 1) * GRID
                    position.z = basePosition.z + (col - 1) * GRID
                end

                -- 適当なマーカーの色を取得する
                local markerColor = nil
                for _, color in pairs(markerColors) do
                    markerColor = color
                end
                -- 取得した色をテーブルから削除する
                for index, value in pairs(markerColors) do
                    if value == markerColor then
                        table.remove(markerColors, index)
                        break
                    end
                end

                -- マーカーを配置する
                local marker = (getRandomMarker(markerColor))
                marker.setPositionSmooth(position, false, false)
                table.insert(spawnedObjects.marker, marker)

                local LshapePosition = copy(position)
                LshapePosition.y = 0.95
                local LshapeRotation = {x = 0, y = 0, z = 0}
                LshapeRotation.y = i * 90
                local Lshape =
                    spawnObject(
                    {
                        type = "Custom_Model",
                        position = {x = LshapePosition.x, y = -0.1, z = LshapePosition.z},
                        rotation = LshapeRotation,
                        sound = false
                    }
                )
                Lshape.setCustomObject(
                    {
                        mesh = ASSET.wall.lshape.mesh,
                        collider = ASSET.wall.lshape.mesh,
                        convex = false,
                        material = 1,
                        specular_intensity = 0
                    }
                )
                Lshape.setColorTint(COLOR.wall)
                Lshape.setPositionSmooth(LshapePosition, false, false)
                Lshape.lock()
                table.insert(spawnedObjects.wall.inner, Lshape)
            end
        end
        log("Restart Count: [FF0000]" .. restartCount .. "[-]")
    end

    return 1
end
